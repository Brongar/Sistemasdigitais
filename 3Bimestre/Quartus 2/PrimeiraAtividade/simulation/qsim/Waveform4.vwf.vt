// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/11/2023 23:28:09"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          AtividadeAvaliada
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AtividadeAvaliada_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg B0;
reg B1;
// wires                                               
wire AigualB;
wire AmaiorB;
wire AmenorB;

// assign statements (if any)                          
AtividadeAvaliada i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.AigualB(AigualB),
	.AmaiorB(AmaiorB),
	.AmenorB(AmenorB),
	.B0(B0),
	.B1(B1)
);
initial 
begin 
#1000000 $finish;
end 

// A0
initial
begin
	A0 = 1'b0;
	A0 = #80000 1'b1;
	A0 = #80000 1'bX;
	A0 = #400000 1'b1;
	# 80000;
	repeat(2)
	begin
		A0 = 1'b0;
		A0 = #80000 1'b1;
		# 80000;
	end
	A0 = 1'b0;
end 

// A1
initial
begin
	repeat(2)
	begin
		A1 = 1'b0;
		A1 = #40000 1'b1;
		# 40000;
	end
	A1 = 1'bX;
	A1 = #400000 1'b0;
	A1 = #40000 1'b1;
	# 40000;
	repeat(4)
	begin
		A1 = 1'b0;
		A1 = #40000 1'b1;
		# 40000;
	end
	A1 = 1'b0;
end 

// B0
initial
begin
	repeat(4)
	begin
		B0 = 1'b0;
		B0 = #20000 1'b1;
		# 20000;
	end
	B0 = 1'bX;
	B0 = #400000 1'b0;
	B0 = #20000 1'b1;
	# 20000;
	repeat(10)
	begin
		B0 = 1'b0;
		B0 = #20000 1'b1;
		# 20000;
	end
end 

// B1
initial
begin
	repeat(8)
	begin
		B1 = 1'b0;
		B1 = #10000 1'b1;
		# 10000;
	end
	B1 = 1'bX;
	B1 = #400000 1'b0;
	B1 = #10000 1'b1;
	# 10000;
	repeat(21)
	begin
		B1 = 1'b0;
		B1 = #10000 1'b1;
		# 10000;
	end
end 
endmodule

