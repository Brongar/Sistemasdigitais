// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 17.0.0 Build 595 04/25/2017 SJ Lite Edition"

// DATE "09/11/2023 23:28:10"

// 
// Device: Altera EP4CE22F17C6 Package FBGA256
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module AtividadeAvaliada (
	AmenorB,
	A1,
	B1,
	B0,
	A0,
	AigualB,
	AmaiorB);
output 	AmenorB;
input 	A1;
input 	B1;
input 	B0;
input 	A0;
output 	AigualB;
output 	AmaiorB;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \AmenorB~output_o ;
wire \AigualB~output_o ;
wire \AmaiorB~output_o ;
wire \B0~input_o ;
wire \B1~input_o ;
wire \A1~input_o ;
wire \A0~input_o ;
wire \inst20~0_combout ;
wire \inst15~0_combout ;
wire \inst7~0_combout ;


cycloneive_io_obuf \AmenorB~output (
	.i(\inst20~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\AmenorB~output_o ),
	.obar());
// synopsys translate_off
defparam \AmenorB~output .bus_hold = "false";
defparam \AmenorB~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \AigualB~output (
	.i(!\inst15~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\AigualB~output_o ),
	.obar());
// synopsys translate_off
defparam \AigualB~output .bus_hold = "false";
defparam \AigualB~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \AmaiorB~output (
	.i(\inst7~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\AmaiorB~output_o ),
	.obar());
// synopsys translate_off
defparam \AmaiorB~output .bus_hold = "false";
defparam \AmaiorB~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \B0~input (
	.i(B0),
	.ibar(gnd),
	.o(\B0~input_o ));
// synopsys translate_off
defparam \B0~input .bus_hold = "false";
defparam \B0~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \B1~input (
	.i(B1),
	.ibar(gnd),
	.o(\B1~input_o ));
// synopsys translate_off
defparam \B1~input .bus_hold = "false";
defparam \B1~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \A1~input (
	.i(A1),
	.ibar(gnd),
	.o(\A1~input_o ));
// synopsys translate_off
defparam \A1~input .bus_hold = "false";
defparam \A1~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \A0~input (
	.i(A0),
	.ibar(gnd),
	.o(\A0~input_o ));
// synopsys translate_off
defparam \A0~input .bus_hold = "false";
defparam \A0~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst20~0 (
// Equation(s):
// \inst20~0_combout  = (\B0~input_o  & (((\B1~input_o  & !\A1~input_o )) # (!\A0~input_o ))) # (!\B0~input_o  & (\B1~input_o  & (!\A1~input_o  & !\A0~input_o )))

	.dataa(\B0~input_o ),
	.datab(\B1~input_o ),
	.datac(\A1~input_o ),
	.datad(\A0~input_o ),
	.cin(gnd),
	.combout(\inst20~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst20~0 .lut_mask = 16'h08AE;
defparam \inst20~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst15~0 (
// Equation(s):
// \inst15~0_combout  = (\B0~input_o  & ((\A1~input_o  $ (\B1~input_o )) # (!\A0~input_o ))) # (!\B0~input_o  & ((\A0~input_o ) # (\A1~input_o  $ (\B1~input_o ))))

	.dataa(\B0~input_o ),
	.datab(\A0~input_o ),
	.datac(\A1~input_o ),
	.datad(\B1~input_o ),
	.cin(gnd),
	.combout(\inst15~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst15~0 .lut_mask = 16'h6FF6;
defparam \inst15~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst7~0 (
// Equation(s):
// \inst7~0_combout  = (\A0~input_o  & (((\A1~input_o  & !\B1~input_o )) # (!\B0~input_o ))) # (!\A0~input_o  & (\A1~input_o  & (!\B1~input_o  & !\B0~input_o )))

	.dataa(\A0~input_o ),
	.datab(\A1~input_o ),
	.datac(\B1~input_o ),
	.datad(\B0~input_o ),
	.cin(gnd),
	.combout(\inst7~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst7~0 .lut_mask = 16'h08AE;
defparam \inst7~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign AmenorB = \AmenorB~output_o ;

assign AigualB = \AigualB~output_o ;

assign AmaiorB = \AmaiorB~output_o ;

endmodule
