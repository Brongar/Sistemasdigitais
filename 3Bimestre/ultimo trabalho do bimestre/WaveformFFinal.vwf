/*<simulation_settings>
<ftestbench_cmd>quartus_eda --gen_testbench --tool=modelsim_oem --format=vhdl --write_settings_files=off memoriaffd -c memoriaffd --vector_source="D:/Documentos/GitHub/Sistemasdigitais/3Bimestre/ultimo trabalho do bimestre/Waveform2.vwf" --testbench_file="D:/Documentos/GitHub/Sistemasdigitais/3Bimestre/ultimo trabalho do bimestre/simulation/qsim/Waveform2.vwf.vht"</ftestbench_cmd>
<ttestbench_cmd>quartus_eda --gen_testbench --tool=modelsim_oem --format=vhdl --write_settings_files=off memoriaffd -c memoriaffd --vector_source="D:/Documentos/GitHub/Sistemasdigitais/3Bimestre/ultimo trabalho do bimestre/Waveform2.vwf" --testbench_file="D:/Documentos/GitHub/Sistemasdigitais/3Bimestre/ultimo trabalho do bimestre/simulation/qsim/Waveform2.vwf.vht"</ttestbench_cmd>
<fnetlist_cmd>quartus_eda --write_settings_files=off --simulation --functional=on --flatten_buses=off --tool=modelsim_oem --format=vhdl --output_directory="D:/Documentos/GitHub/Sistemasdigitais/3Bimestre/ultimo trabalho do bimestre/simulation/qsim/" memoriaffd -c memoriaffd</fnetlist_cmd>
<tnetlist_cmd>quartus_eda --write_settings_files=off --simulation --functional=off --flatten_buses=off --timescale=1ps --tool=modelsim_oem --format=vhdl --output_directory="D:/Documentos/GitHub/Sistemasdigitais/3Bimestre/ultimo trabalho do bimestre/simulation/qsim/" memoriaffd -c memoriaffd</tnetlist_cmd>
<modelsim_script>onerror {exit -code 1}
vlib work
vcom -work work memoriaffd.vho
vcom -work work Waveform2.vwf.vht
vsim -novopt -c -t 1ps -L cycloneive -L altera -L altera_mf -L 220model -L sgate -L altera_lnsim work.final_vhd_vec_tst
vcd file -direction memoriaffd.msim.vcd
vcd add -internal final_vhd_vec_tst/*
vcd add -internal final_vhd_vec_tst/i1/*
proc simTimestamp {} {
    echo "Simulation time: $::now ps"
    if { [string equal running [runStatus]] } {
        after 2500 simTimestamp
    }
}
after 2500 simTimestamp
run -all
quit -f

</modelsim_script>
<modelsim_script_timing>onerror {exit -code 1}
vlib work
vcom -work work memoriaffd.vho
vcom -work work Waveform2.vwf.vht
vsim -novopt -c -t 1ps -sdfmax final_vhd_vec_tst/i1=memoriaffd_vhd.sdo -L cycloneive -L altera -L altera_mf -L 220model -L sgate -L altera_lnsim work.final_vhd_vec_tst
vcd file -direction memoriaffd.msim.vcd
vcd add -internal final_vhd_vec_tst/*
vcd add -internal final_vhd_vec_tst/i1/*
proc simTimestamp {} {
    echo "Simulation time: $::now ps"
    if { [string equal running [runStatus]] } {
        after 2500 simTimestamp
    }
}
after 2500 simTimestamp
run -all
quit -f

</modelsim_script_timing>
<hdl_lang>vhdl</hdl_lang>
</simulation_settings>*/
/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 2017  Intel Corporation. All rights reserved.
Your use of Intel Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Intel Program License 
Subscription Agreement, the Intel Quartus Prime License Agreement,
the Intel MegaCore Function License Agreement, or other 
applicable license agreement, including, without limitation, 
that your use is for the sole purpose of programming logic 
devices manufactured by Intel and sold by Intel or its 
authorized distributors.  Please refer to the applicable 
agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("Clock")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("D")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("D[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "D";
}

SIGNAL("D[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "D";
}

SIGNAL("D[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "D";
}

SIGNAL("D[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "D";
}

SIGNAL("D[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "D";
}

SIGNAL("D[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "D";
}

SIGNAL("D[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "D";
}

SIGNAL("D[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "D";
}

SIGNAL("enderecoX")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("enderecoY")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("escrever")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("ler")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("Saida")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Saida[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Saida";
}

SIGNAL("Saida[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Saida";
}

SIGNAL("Saida[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Saida";
}

SIGNAL("Saida[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Saida";
}

SIGNAL("Saida[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Saida";
}

SIGNAL("Saida[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Saida";
}

SIGNAL("Saida[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Saida";
}

SIGNAL("Saida[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Saida";
}

TRANSITION_LIST("Clock")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 100;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 5.0;
		}
	}
}

TRANSITION_LIST("D[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 0.673;
		LEVEL 1 FOR 12.874;
		LEVEL 0 FOR 38.966;
		LEVEL 1 FOR 8.759;
		LEVEL 0 FOR 11.776;
		LEVEL 1 FOR 8.795;
		LEVEL 0 FOR 918.157;
	}
}

TRANSITION_LIST("D[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 0.673;
		LEVEL 1 FOR 12.874;
		LEVEL 0 FOR 38.966;
		LEVEL 1 FOR 8.759;
		LEVEL 0 FOR 11.776;
		LEVEL 1 FOR 8.795;
		LEVEL 0 FOR 918.157;
	}
}

TRANSITION_LIST("D[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 0.673;
		LEVEL 1 FOR 12.874;
		LEVEL 0 FOR 38.966;
		LEVEL 1 FOR 8.759;
		LEVEL 0 FOR 11.776;
		LEVEL 1 FOR 8.795;
		LEVEL 0 FOR 918.157;
	}
}

TRANSITION_LIST("D[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 0.673;
		LEVEL 1 FOR 12.874;
		LEVEL 0 FOR 38.966;
		LEVEL 1 FOR 8.759;
		LEVEL 0 FOR 11.776;
		LEVEL 1 FOR 8.795;
		LEVEL 0 FOR 918.157;
	}
}

TRANSITION_LIST("D[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 0.673;
		LEVEL 1 FOR 12.874;
		LEVEL 0 FOR 9.342;
		LEVEL 1 FOR 10.856;
		LEVEL 0 FOR 39.303;
		LEVEL 1 FOR 8.795;
		LEVEL 0 FOR 918.157;
	}
}

TRANSITION_LIST("D[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 0.673;
		LEVEL 1 FOR 12.874;
		LEVEL 0 FOR 9.342;
		LEVEL 1 FOR 10.856;
		LEVEL 0 FOR 39.303;
		LEVEL 1 FOR 8.795;
		LEVEL 0 FOR 918.157;
	}
}

TRANSITION_LIST("D[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 0.673;
		LEVEL 1 FOR 12.874;
		LEVEL 0 FOR 9.342;
		LEVEL 1 FOR 10.856;
		LEVEL 0 FOR 39.303;
		LEVEL 1 FOR 8.795;
		LEVEL 0 FOR 918.157;
	}
}

TRANSITION_LIST("D[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 0.673;
		LEVEL 1 FOR 12.874;
		LEVEL 0 FOR 9.342;
		LEVEL 1 FOR 10.856;
		LEVEL 0 FOR 39.303;
		LEVEL 1 FOR 8.795;
		LEVEL 0 FOR 918.157;
	}
}

TRANSITION_LIST("enderecoX")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 51.446;
		LEVEL 1 FOR 20.498;
		LEVEL 0 FOR 2.318;
		LEVEL 1 FOR 7.139;
		LEVEL 0 FOR 1.472;
		LEVEL 1 FOR 7.581;
		LEVEL 0 FOR 909.546;
	}
}

TRANSITION_LIST("enderecoY")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 23.736;
		LEVEL 1 FOR 18.878;
		LEVEL 0 FOR 31.648;
		LEVEL 1 FOR 7.139;
		LEVEL 0 FOR 1.472;
		LEVEL 1 FOR 7.581;
		LEVEL 0 FOR 909.546;
	}
}

TRANSITION_LIST("escrever")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 4.36;
		LEVEL 1 FOR 5.539;
		LEVEL 0 FOR 14.352;
		LEVEL 1 FOR 8.685;
		LEVEL 0 FOR 19.209;
		LEVEL 1 FOR 10.231;
		LEVEL 0 FOR 12.217;
		LEVEL 1 FOR 6.072;
		LEVEL 0 FOR 919.335;
	}
}

TRANSITION_LIST("ler")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 14.388;
		LEVEL 1 FOR 8.538;
		LEVEL 0 FOR 10.93;
		LEVEL 1 FOR 16.67;
		LEVEL 0 FOR 13.506;
		LEVEL 1 FOR 8.832;
		LEVEL 0 FOR 11.371;
		LEVEL 1 FOR 12.843;
		LEVEL 0 FOR 902.922;
	}
}

TRANSITION_LIST("Saida[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("Saida[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("Saida[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("Saida[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("Saida[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("Saida[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("Saida[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("Saida[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "D";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
	CHILDREN = 1, 2, 3, 4, 5, 6, 7, 8;
}

DISPLAY_LINE
{
	CHANNEL = "D[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "D[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "D[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "D[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "D[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "D[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "D[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "D[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Clock";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "enderecoX";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "enderecoY";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "escrever";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ler";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Saida";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
	CHILDREN = 15, 16, 17, 18, 19, 20, 21, 22;
}

DISPLAY_LINE
{
	CHANNEL = "Saida[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "Saida[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "Saida[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "Saida[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "Saida[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "Saida[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "Saida[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "Saida[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 14;
}

TIME_BAR
{
	TIME = 50784;
	MASTER = TRUE;
}
;
